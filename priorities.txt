design priorities

0. we think it's really important to rely as much as possible on a well-known
and well-understood existent programming langauge. no domain-specific languages
(dsls). music people always think they need a dsl. everybody always makes that
mistake. extend existing language.

1. "universal illustration." it's important that composers be able to
illustrate all objects they work with as they compose. this design priority is
reflected in the establishment of what we call the illustration protocol. this
priority is driven in large part by our shared insistence on the incredible
power of conventional music notation as a tool for thinking about sound and
time. (we wanna make it possible to illustrate everything all the time because
we notation helps us think about such incredibly complex stuff.)

"input flexibility" you can build up score via iterative aggregation but
you can also just type a lilypond string into a staff. we afford both types of
input and, indeed, two different ways of building up score. this is where we
should cite alan kay's smalltalk paper. ("it's easy to make a thing.")

we make it easy to build up complex score objects through iterative
aggregation. ("we make it easy to build things up.")

we provide factories. factory functions. factory classes. when we wanna
make complex stuff we usually come up with factories. (there may be a design
principle here that initialization is kept simple and we implement in factories
complex ways of aggregating together objects that admit only simple
initialization.) (we generalize many of these things in processes.)

there's a design priority in here somewhere that what we want to do is
make it as easy as possible for people to implement their own factories. what
does this mean? it means that we want to make it as easy as possible for people
to implement their own code that outputs or creates intermediate level
structures or materials. (there's a realization here that people probabaly
don't find it interesting to make a single note. but people can find it totally
fascinating to make an intermediate-level object like a complete phrase of
music.) we think it's important for composers to be able to create their own
processes that generalize these things.

==

3. "encapsulation". we want everything to be encapsulated as much as
possible. what this comes out to mean is the system is overwhelming
object-oriented (in the proper uses of the term) and that all parts of the
system (whether object-oriented or not) are structured in such a way as to
provide a single interface named according to a uniform set of naming
conventions.

====

3.15 we think it's important that users of the system should always have access
to an object-oriented interface to the graphic elements on the page.

3.2 we're committed to providing our users access to the full inventory of
symbols of conventional musical notation. (by contrast, we're not committed to
affording the drawing of arbitrary lines or other vectors.) in fact it's
interesting because what we seem to be committed to is letting users
instantiate conventionally semantic objects. and we're not at all committed to
letting users instantiate *nonsemantic* (that is, "purely graphic") objects.

3.5 we think it's important that users have access to all the features of the
underlying typesetter. (this is definitely a design committment and a
development committment.) this definitely comes from working with lilypond.

===


4. "selection flexability". we think it's important for composers to be able to
select arbitrary collections of score objects. this is important for a couple
of reasons. first, so that composers can map operations to the entirety of such
a selection at one time. second, there's some type of conceptual benefit to be
had in named selections; the point is that every selection is an ad hoc
intermediate structure created in the midst of the score. we also think it's
important to afford composers the ability to reference score objects in
whatever ways are most natural for a given task. sometimes the most natural
mode of reference is numeric, sometimes by name or sometimes by music-specific
criteria such as the relative times at which different objects appear in the
score. examples follow. we provide concrete object models of vertical
relationships in the score.

5. "configuration is super fucking important." we think it's important for
composers to be able to define an operation (where musical or notational) one
time and be able to apply the operation to arbitrarily many objects in the
score at once. of the many ways abjad provides of doing this, the most
important (and most general) is iteration. examples follow. iteration can be
glossed as "define-once, apply-many". "configuration reuse". we think it's
important for composers to be able to configure objects a single time, and then
resuse the configuration as many times as necessary while composing. we also
think it's important to configure complex objects all at once. "templating". we
think it's important for composers to be able to template all objects in the
system, especially the hugely complex objects.

6. we try to follow the best practices of the open-source community (which has
a number of subpoints). 