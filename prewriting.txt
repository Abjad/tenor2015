Deadline: 1/31
Notification: “End of February”
4-12 pages**

**The tenor2015template.pdf (contained in this directory) states the "[t]he
paper must not exceed 8 pages, no matter if you are presenting orally or
posterly. We strongly encourage a paper length of 6 pages." But Jeff's email to
the conference organizers confirms that 4-12 pages is the correct length.

Abjad is not a music notation program - it’s a modeling program that happens to
have the ability to generate notations.

Background and history.

Modeling composition vs modeling notation.

Overview of Abjad with examples.

CSI - Component, Spanner, Indicator.

Important: we object model glyphs on the page — but it goes a step further:
models abstract relationships between those things.

Goal: composition-agnostic.

Core packages:
    * scoretools
    * indicatortools
    * spannertools

Mandatory packages (required for the core packages to function correctly):
    * datastructuretools
    * durationtools
    * markuptools
    * mathtools
    * pitchtools
    * schemetools
    * selectiontools
    * stringtools
    * topleveltools

Extensibility. Abjad is architected as a Python package. Other Python packages
include the datetime, itertools and random modules [do we need to distinguish
between Python packages and Python modules?] included in the Python standard
library as well as the thousands of Python packages available for download over
the public Internet at the Python Package Index. (The Python Package Index is
available at http://pypi.python.org.)

Why is it important that Abjad is a Python module? [Fill in with a few benefits
of extensibility here.] [QUESTION: does the fact that Abjad is architected as a
Python package point to the *extensibility* of Abjad or to something else? Like
perhaps to the accessiblity of Abjad? Though "accessibility" refers to readable
typefaces and text-to-speech affordances for non-hearing users in this context.
So we need a different word here.]

The Python website includes this boilerplate on the benefit of Python packages:

"As a popular open source development project, Python has an active supporting
community of contributors and users that also make their software available for
other Python developers to use under open source license terms. This allows
Python users to share and collaborate effectively, benefiting from the
solutions others have already created to common (and sometimes even rare!)
problems, as well as potentially contributing their own solutions to the common
pool." [https://docs.python.org/3/installing/index.html]

Developer-provided examples of extensibility. That is, components that function
as "plug-ins" to the Abjad core system:
    * labeltools
    * metertools
    * quantizationtools
    * rhythmmakertools
    * selectortools
    * sequencetools
    * sievetools
    * tonalanalysistools

Abjad is the first robust object-oriented interface to Western Notation.

Cognitive bits Smalltalk comparisons, etc.

Crucial: early assumption in design — who knows how anyone else composes?
however it is, we want a lot of the same basic things (iteration, indexing and
addressing, hierarchical nesting, nesting, containment, structural addressing,
encapsulation) — dovetails with example of iterating through notes, chords,
rests in PWGL vs Abjad, can build on ch. 1 discussion of readability and score
navigation.

We should do away with the distinction between composers and programmers.

Model: LilyPond paper.

Paragraph: problems of representation (list things we’ll later publish).

0. Introduction: boilerplate on what Abjad is and the most recent statistics
about it. [Tevor]

1. Background. [Jeff]

Explicitness of representation. Notational isomorphism. [Josiah]
    "Typographic Modeling" / "We model objects on the page"
    - cite Kay and Smalltalk
    - we model objects on the page according to common pratice notation
    - modeling of musical constructs is explicit
        - Note, Chord, Rest, etc., not lists of (implicit) numbers
    - this is extensible and we respond to requests for additions (you get what
      you need to make scores)
    - examples:
        - 5/8 must be notated with ties (or equivalent)
        - accidentals must be specified
        - tuplets must be built either as augmentations or diminutions
    [FEEDFORWARD: single paper on semiotic status of defining new stuff]
    How we build up score:
        - instantiation
        - arbitrary annotation
        - attach() / detach()
        - mutation
        - [again, afforded by clean object model and iteration tools]
        - Appending, extending
            - the score tree, between parents
        - mutate()
        - some type of compositional process agnositicism
        - iterative
        - modular construction
        - iterative aggregation
    We assume notational primitives are the elements of composition
    - Notational visualization
    [special almost-accidental feature is that while you're composing you can
    have near-publication-quality output while you're working]

Relationship Modeling [Hold off for now]

   (many methods of InspectionAgent should be given as examples:
   get_descendants, get_durations, get_effective_staff, get_lineage,
   get_logical_tie, get_parentage, get_sounding_pitch, get_vertical_moment
   (Address in each subsection the way that pointers have been approached in
   the object models.)

   - Interrogability
   - Component, Spanner, Indicator
      - Components
         - Leaves
         - Containers
            - They're either contiguous, sequential time sequence, or parallel 
            containers.
      - Spanners
      - Indicator
   - Selection
   (introductory)
      - We don't use containers for this, because containers imply time-orientation. 
      - A list of components without time ordering
      - Avoids need for bi-directional pointers (selections are not pointer-rich)
      - Relationships in the Score Hierarchy
         - Lineage
         - Parentage
         - Descendants
      - Relationships in Time
         - LogicalTie
         - Slice
         - VerticalMoment
         - Timespans
            - Models abstract temporal relationships
            - Any durated objects (components and spanners) model that exists 
            in time has a timespan
      - Arbitrary collection of components listed together.
    - IndicatorExpression (this touches on a conversation of horizontal
      contexts and scope)

Score Addressability [Trevor]
    - Iteration
        - methods that "get_*"
            Container.select_leaves
            Container.select_notes_and_chords
            IterationAgent.by_class, .by_logical_tie, .by_timeline, .by_vertical_moment, .depth_first
        - efficient and intuitive navigation of the score hierarchy does what mapping does in a functional program
            -containers partake of Python's sequence iterating interface (for loops work)
    - Structural Addressing
        - numeric addressing
        - temporal addressing
        - named addressing
        
Extensibility [Jeff]
    - Abjad core model is agnostic to composition techniques
    - Abjad provides affordances for high-level, personal, eccentric
      composition techniques as optional tools packages.
        - labeltools
        - metertools
        - quantizationtools
        - rhythmmakertools
        - selectortools
        - sievetools
        - tonalanalysistools
    - Composers and researchers are free to contribute changes via pull request
        - continuous integration simplifies the contribution process

Embeddability [Josiah]
    - Abjad is an importable Python library
    - It can be used as a dependency in any other Python project.
    - Abjad supports iPython Notebooks; a popular format for interactively
      creating math and science documents.

Open-source [Trevor]
    - accessibility, transparency
    - encourages sharing of best practices
        - extensive documentation
        - extensive testing (regression, documentation testing, continuous
          integration)
        - supports multiple python versions
        - supports Python's community coding standards
    - encourages participation in a community
    - allied open-source development teams and priorities
        - our entire toolchain is open source: Python, LilyPond, all Python
          dependencies (Sphinx, Pytest etc), Graphviz, Imagemagick, LaTeX
    - minimize chances of possible obsolescence
    - testing and refactoring
        - 9 million line changes to 250,000 current lines: a refactoring ratio
          of approximately 36 to 1.
        - For every line in code, 35 have been discarded.

Conclusions and Future Direction [save until end or possibly not even present
    in this paper]
    IDE
    Document Preparation
   
to do: 
   audit outline for what figures we should include
   input flexibility must be demonstrated (philosophy: Goldilocks. pitch, duration, note, container), 
   either in footnotes or through example variety
   determine where to talk about how Abjad extends Python