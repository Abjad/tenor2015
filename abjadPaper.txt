Deadline: 1/31
Notification: “End of February”
4-12 pages**

**Though note that the tenor2015template.pdf (contained in this directory)
states the "[y] paper must not exceed 8 pages, no matter if you are presenting
orally or posterly. We strongly encourage a paper length of 6 pages."

Abjad is not a music notation program - it’s a modeling program that happens to
have the ability to generate notations.

Background and history.

Modeling composition vs modeling notation.

Overview of Abjad with examples

LCSI - Leaf, Container, Spanner, Indicator
Concrete class for parentage (object model of parentage)

Important: we object model glyphs on the page — but it goes a step further:
models abstract relationships between those things.

Goal: composition-agnostic

Core packages:
    * scoretools
    * indicatortools
    * spannertools

Mandatory packages (required for the core packages to function correctly):
    * datastructuretools
    * durationtools
    * markuptools
    * mathtools
    * pitchtools
    * schemetools
    * selectiontools
    * stringtools
    * topleveltools

Extensibility. Abjad is architected as a Python package. Other Python packages
include the datetime, itertools and random modules [do we need to distinguish
between Python packages and Python modules?] included in the Python standard
library as well as the thousands of Python packages available for download over
the public Internet at the Python Package Index. (The Python Package Index is
available at http://pypi.python.org.)

Why is it important that Abjad is a Python module? [Fill in with a few benefits
of extensibility here.] [QUESTION: does the fact that Abjad is architected as a
Python package point to the *extensibility* of Abjad or to something else? Like
perhaps to the accessiblity of Abjad? Though "accessibility" refers to readable
typefaces and text-to-speech affordances for non-hearing users in this context.
So we need a different word here.]

The Python website includes this boilerplate on the benefit of Python packages:

"As a popular open source development project, Python has an active supporting
community of contributors and users that also make their software available for
other Python developers to use under open source license terms. This allows
Python users to share and collaborate effectively, benefiting from the
solutions others have already created to common (and sometimes even rare!)
problems, as well as potentially contributing their own solutions to the common
pool." [https://docs.python.org/3/installing/index.html]

Developer-provided examples of extensibility. That is, components that function
as "plug-ins" to the Abjad core system:
    * labeltools
    * metertools
    * quantizationtools
    * rhythmmakertools
    * selectortools
    * sequencetools
    * sievetools
    * tonalanalysistools

Abjad is the first robust object-oriented interface to Western Notation.

Cognitive bits Smalltalk comparisons, etc.

Crucial: early assumption in design — who knows how anyone else composes?
however it is, we want a lot of the same basic things (iteration, indexing and
addressing, hierarchical nesting, nesting, containment, structural addressing,
encapsulation) — dovetails with example of iterating through notes, chords,
rests in PWGL vs Abjad, can build on ch. 1 discussion of readability and score
navigation.

We should do away with the distinction between composers and programmers.

Model: LilyPond paper.

Paragraph: problems of representation (list things we’ll later publish).

Outline based on design priorities --

Typographic Modeling
    - cite Kay and Smalltalk
    - we model objects on the page according to common pratice notation
    - Modeling of musical constructs is explicit
        - Note, Chord, Rest, etc., not lists of (implicit) numbers
    - this is extensible and we respond to requests for additions (you get what
      you need to make scores)
    - examples:
        - written, assignable and prolated durations
        - named pitches vs numbered pitches

Relationship Modeling
    - Leaf, Container, Spanner, Indicator
    - Selection, [ContiguousSelection, SliceSelection, etc.]
    - Parentage
    - LogicalTie
    - IndicatorExpression (this touches on a conversation of horizontal
      contexts and scope)

Score Navigation
    - Iteration
        - efficient and intuitive navigation of the score hierarchy does what
          mapping does in a functional program
    - Structural Addressing
        - list indexing
        - list slicing
        - named context accessing (regardless of depth in the score tree)
    - examples:
        - InspectionAgent, IterationAgent


Score Mutation
    - [again, afforded by clean object model and iteration tools]
    - Appending, extending, (__setitem__) allows for moving objects around in
      the score tree, between parents
    - attach() / detach()
    - mutate()

Extensibility
    - Abjad core model is agnostic to composition techniques
    - Abjad provides affordances for high-level, personal, eccentric
      composition techniques as optional tools packages.
        - labeltools
        - metertools
        - quantizationtools
        - rhythmmakertools
        - selectortools
        - sievetools
        - tonalanalysistools
    - Composers and researchers are free to contribute changes via pull request
        - continuous integration simplifies the contribution process

Embeddability
    - Abjad is an importable Python library
    - It can be used as a dependency in any other Python project.
    - Abjad supports iPython Notebooks; a popular format for interactively
      creating math and science documents.

Open-source
    - Accessibility, transparency
    - encourages sharing of best practices
        - extensive documentation
        - extensive testing (regression, documentation testing, continuous
          integration)
        - supports multiple python versions
        - supports Python's community coding standards
    - encourages participation in a community
    - allied open-source development teams and priorities
        - our entire toolchain is open source: Python, LilyPond, all Python
          dependencies (Sphinx, Pytest etc), Graphviz, Imagemagick, LaTeX
    - minimize chances of possible obsolescence
    - testing and refactoring
        - 9 million line changes to 250,000 current lines: a refactoring ratio
          of approximately 36 to 1.
        - For every line in code, 35 have been discarded.